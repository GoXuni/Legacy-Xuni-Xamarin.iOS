// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

using Xuni.iOS.Core;
using Xuni.iOS.ChartCore;
using Xuni.iOS.FlexChart;
using System.Linq;
using System.Collections.Generic;

namespace FlexChartSample
{
	public partial class LoadAnimationController : UIViewController
	{
		string[] chartTypes = {"Column", "Area", "Line", "LineSymbols", "Spline", "SplineSymbols", "SplineArea", "Scatter" };
		string[] chartAnimation = { "All", "Point", "Series" };

		public class ChartTypesModel : UIPickerViewModel
		{
			LoadAnimationController tk;

			public ChartTypesModel(LoadAnimationController tk)
			{
				this.tk = tk;
			}

			public override nint GetComponentCount(UIPickerView v)
			{
				return 2;
			}

			public override nint GetRowsInComponent(UIPickerView pickerView, nint component)
			{
				if (component == 0)
					return tk.chartTypes.Length;
				else
					return tk.chartAnimation.Length;
			}

			public override string GetTitle(UIPickerView picker, nint row, nint component)
			{
				if (component == 0)
					return tk.chartTypes[row];
				else
					return tk.chartAnimation[row];
			}

			public override void Selected(UIPickerView picker, nint row, nint component)
			{
				if (component == 0)
				{
					if (row == 0)
					{
						tk.chart.ChartType = ChartType.Column;
					}
					else if (row == 1)
					{
						tk.chart.ChartType = ChartType.Area;
					}
					else if (row == 2)
					{
						tk.chart.ChartType = ChartType.Line;
					}
					else if (row == 3)
					{
						tk.chart.ChartType = ChartType.LineSymbols;
					}
					else if (row == 4)
					{
						tk.chart.ChartType = ChartType.Spline;
					}
					else if (row == 5)
					{
						tk.chart.ChartType = ChartType.SplineSymbols;
					}
					else if (row == 6)
					{
						tk.chart.ChartType = ChartType.SplineArea;
					}
					else if (row == 7)
					{
						tk.chart.ChartType = ChartType.Scatter;
					}
				}
				else if (component == 1)
				{
					if (row == 0)
					{
						tk.chart.LoadAnimation.AnimationMode = AnimationMode.All;
					}
					else if (row == 1)
					{
						tk.chart.LoadAnimation.AnimationMode = AnimationMode.Point;
					}
					else if (row == 2)
					{
						tk.chart.LoadAnimation.AnimationMode = AnimationMode.Series;
					}
				}

			}

		}

		public LoadAnimationController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			picker.Model = new ChartTypesModel(this);

			chart.BindingX = "Name";
			chart.Series.Add(new Series(chart, "Sales, Sales", "Sales"));
			chart.Series.Add(new Series(chart, "Expenses, Expenses", "Expenses"));
			chart.Series.Add(new Series(chart, "Downloads, Downloads", "Downloads"));
			chart.ItemsSource = SalesData.GetSalesDataList();

			chart.LoadAnimation.AnimationMode = AnimationMode.Point;
			chart.Palette = XuniPalettes.Modern;
		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

			picker.Select(0, 0, false);
			picker.Select(1, 1, false);
		}
	}
}
