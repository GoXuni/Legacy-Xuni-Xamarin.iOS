// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

using Xuni.iOS.Core;
using Xuni.iOS.ChartCore;
using Xuni.iOS.FlexChart;
using System.Linq;
using System.Collections.Generic;

namespace FlexChartSample
{
	public partial class UpdateAnimationController : UIViewController
	{
		string[] chartTypes = { "Column", "Area", "Line", "LineSymbols", "Spline", "SplineSymbols", "SplineArea", "Scatter" };
		string[] chartAnimation = { "Beginning", "Middle", "End" };

		public class ChartTypesModel : UIPickerViewModel
		{
			UpdateAnimationController tk;

			public ChartTypesModel(UpdateAnimationController tk)
			{
				this.tk = tk;
			}

			public override nint GetComponentCount(UIPickerView v)
			{
				return 2;
			}

			public override nint GetRowsInComponent(UIPickerView pickerView, nint component)
			{
				if (component == 0)
					return tk.chartTypes.Length;
				else
					return tk.chartAnimation.Length;
			}

			public override string GetTitle(UIPickerView picker, nint row, nint component)
			{
				if (component == 0)
					return tk.chartTypes[row];
				else
					return tk.chartAnimation[row];
			}

			public override void Selected(UIPickerView picker, nint row, nint component)
			{
				if (component == 0)
				{
					if (row == 0)
					{
						tk.chart.ChartType = ChartType.Column;
					}
					else if (row == 1)
					{
						tk.chart.ChartType = ChartType.Area;
					}
					else if (row == 2)
					{
						tk.chart.ChartType = ChartType.Line;
					}
					else if (row == 3)
					{
						tk.chart.ChartType = ChartType.LineSymbols;
					}
					else if (row == 4)
					{
						tk.chart.ChartType = ChartType.Spline;
					}
					else if (row == 5)
					{
						tk.chart.ChartType = ChartType.SplineSymbols;
					}
					else if (row == 6)
					{
						tk.chart.ChartType = ChartType.SplineArea;
					}
					else if (row == 7)
					{
						tk.chart.ChartType = ChartType.Scatter;
					}
				}
			}

		}

		public UpdateAnimationController (IntPtr handle) : base (handle)
		{
		}

		List<MyDataObject> objects;

		Random rnd = new Random();

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();
			objects = new List<MyDataObject>();
			for (int i = 0; i < 8; i++)
			{
				objects.Add(new MyDataObject { Value = rnd.Next(i, 10 + i * i), XValue = GetRandomLetter() });
			}

			picker.Model = new ChartTypesModel(this);

			chart.BindingX = "XValue";
			chart.Series.Add(new Series(chart, "Value", "Value"));â€¨			chart.ItemsSource = objects;

			chart.LoadAnimation.AnimationMode = AnimationMode.Point;
			chart.Legend.Position = Position.None;
			chart.Palette = XuniPalettes.Cocoa;
			chart.AxisY.AxisLineVisible = false;
			chart.AxisY.MajorTickWidth = 0;

		}

		partial void addPoint(UIKit.UIBarButtonItem sender)
		{
			if (picker.SelectedRowInComponent(1) == 0)
			{
				chart.CollectionView.Insert(0, new MyDataObject { Value = rnd.Next(10, 50), XValue = GetRandomLetter() });
			} else if (picker.SelectedRowInComponent(1) == 1)
			{
				chart.CollectionView.Insert(chart.CollectionView.Count/2, new MyDataObject { Value = rnd.Next(10, 50), XValue = GetRandomLetter() });
			} else if (picker.SelectedRowInComponent(1) == 2)
			{
				chart.CollectionView.Add(new MyDataObject { Value = rnd.Next(10, 50), XValue = GetRandomLetter() });
			}
		}

		partial void removePoint(UIKit.UIBarButtonItem sender)
		{
			if (picker.SelectedRowInComponent(1) == 0)
			{
				chart.CollectionView.RemoveAt(0);
			}
			else if (picker.SelectedRowInComponent(1) == 1)
			{
				chart.CollectionView.RemoveAt(chart.CollectionView.Count / 2);
			}
			else if (picker.SelectedRowInComponent(1) == 2)
			{
				chart.CollectionView.RemoveAt(chart.CollectionView.Count-1);
			}
		}

		class MyDataObject
		{
			public string XValue { get; set; }
			public double Value { get; set; }
		}

		string GetRandomLetter()
		{
			return Char.ConvertFromUtf32(rnd.Next(65, 90));
		}
	}
}
