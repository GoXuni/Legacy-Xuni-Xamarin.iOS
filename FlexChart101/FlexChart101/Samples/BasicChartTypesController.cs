// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Xuni.iOS.FlexChart;

namespace FlexChartSample
{
	public partial class BasicChartTypesController : UIViewController
	{
		public BasicChartTypesController(IntPtr handle) : base(handle)
		{
		}

		string[] chartTypes = { "Column", "Bar", "Scatter", "Line", "LineSymbol", "Area" };
		string[] chartStacking = { "None", "Stacked", "Stacked100pc" };

		public class ChartTypesModel : UIPickerViewModel 		{ 			BasicChartTypesController tk;  			public ChartTypesModel(BasicChartTypesController tk) 			{ 				this.tk = tk; 			}  			public override nint GetComponentCount(UIPickerView v) 			{ 				return 2; 			}  			public override nint GetRowsInComponent(UIPickerView pickerView, nint component) 			{ 				if (component == 0)
					return tk.chartTypes.Length;
				else
					return tk.chartStacking.Length; 			}  			public override string GetTitle(UIPickerView picker, nint row, nint component) 			{ 				if (component == 0) 					return tk.chartTypes[row]; 				else 					return tk.chartStacking[row]; 			}  			public override void Selected(UIPickerView picker, nint row, nint component) 			{
				if (component == 0)
				{
					if (row == 0)
					{
						tk.chart.ChartType = ChartType.Column;
					}
					else if (row == 1)
					{
						tk.chart.ChartType = ChartType.Bar;
					}
					else if (row == 2)
					{
						tk.chart.ChartType = ChartType.Scatter;
					}
					else if (row == 3)
					{
						tk.chart.ChartType = ChartType.Line;
					}
					else if (row == 4)
					{
						tk.chart.ChartType = ChartType.LineSymbols;
					}
					else if (row == 5)
					{
						tk.chart.ChartType = ChartType.Area;
					}
				}
				else if (component == 1)
				{
					if (row == 0)
					{
						tk.chart.Stacking = Stacking.None;

					}
					else if (row == 1)
					{
						tk.chart.Stacking = Stacking.Stacked;
					}
					else if (row == 2)
					{
						tk.chart.Stacking = Stacking.Stacked100pc;
					}
				}

				tk.UpdateAxesFormat();
			}

		}

		void UpdateAxesFormat()
		{
			if (chart.ChartType == ChartType.Bar)
			{
				if (chart.Stacking == Stacking.Stacked100pc && chart.Rotated == false)
				{
					chart.AxisX.Format = "F2";
					chart.AxisY.Format = "D";
				}
				else if (chart.Stacking == Stacking.Stacked100pc && chart.Rotated == true)
				{
					chart.AxisX.Format = "D";
					chart.AxisY.Format = "F2";
				}
				else {
					chart.AxisX.Format = "D";
					chart.AxisY.Format = "D";
				}
			}
			else {
				if (chart.Stacking == Stacking.Stacked100pc && chart.Rotated == false)
				{
					chart.AxisX.Format = "D";
					chart.AxisY.Format = "F2";
				}
				else if (chart.Stacking == Stacking.Stacked100pc && chart.Rotated == true)
				{
					chart.AxisX.Format = "F2";
					chart.AxisY.Format = "F2";
				}
				else {
					chart.AxisX.Format = "D";
					chart.AxisY.Format = "D";
				}
			}

		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();
			picker.Model = new ChartTypesModel(this);

			chart.BindingX = "Name";

			chart.Series.Add(new Series(chart, "Sales, Sales", "Sales"));
			chart.Series.Add(new Series(chart, "Expenses, Expenses", "Expenses"));
			chart.Series.Add(new Series(chart, "Downloads, Downloads", "Downloads"));

			chart.ItemsSource = SalesData.GetSalesDataList();

			chart.ChartType = ChartType.Area;
			chart.Stacking = Stacking.Stacked;
		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

			picker.Select(5, 0, false);
			picker.Select(1, 1, false);
		}

		partial void reverseSwitched(UISwitch sender)
		{
			string temp = chart.AxisX.Format;
			chart.AxisX.Format = chart.AxisY.Format;
			chart.AxisY.Format = temp;

			chart.Rotated = sender.On;
		}
	}

}
